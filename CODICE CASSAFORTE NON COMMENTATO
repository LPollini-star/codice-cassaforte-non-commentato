/*CODICE CASSAFORTE NON COMMENTATO*/

#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>
#include <MFRC522.h>
#define Password_Length 8

MFRC522 rfid(9, 8);
int rfidOK = 0;
String users[] = {"76dd0129"};
int usersSize = sizeof(users)/sizeof(String);
Servo myServo;
int servoPin = 10;
int signalPin = 12;    
const int PORTA_CHIUSA = 70;
const int PORTA_APERTA = 0;
char Data[Password_Length]; 
char Master[Password_Length] = "1234560"; 
byte data_count = 0, master_count = 0;
bool Pass_is_good;
char customKey;
int tastOK = 0;

const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte colPins[ROWS] = {14, 15, 7, 6};
byte rowPins[COLS] = {5, 4, 3, 2};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

LiquidCrystal_I2C lcd(0x27, 16, 2);  

int ledPin = 22;

void setup(){
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  lcd.init(); 
  lcd.backlight();
  myServo.attach(servoPin);
  myServo.write(PORTA_CHIUSA);
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();
}

void loop(){
    lcd.setCursor(0,0);
    lcd.print("  PASSWORD...");
    customKey = customKeypad.getKey();
    if (customKey){
      Data[data_count] = customKey; 
      lcd.setCursor(data_count,1); 
      lcd.print(Data[data_count]); 
      data_count++; 
      tone(signalPin, 2500, 75);
      delay(250);
      noTone(signalPin);
      }
    if(rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()){
      String uid = getUID();
      Serial.println("RFID ID:  " + uid);
      if(checkUID(uid)){
        rfidOK = 1;
      }
    }
    if(data_count == Password_Length-1){
      lcd.clear();
      if(!strcmp(Data, Master)){
        tastOK = 1;
      }
    }
      if(rfidOK == 1 || tastOK == 1)
      {
        lcd.print(" Pass Corretta");
        openDoor();
        checkClose();
        closeDoor();
      }
      if(data_count == Password_Length-1 && strcmp(Data, Master)){
        lcd.clear();
        lcd.print("Pass Errata");
        tone(signalPin, 500, 1500);
        delay(3000);
        noTone(signalPin);
        clearData();
        }
}

void clearData(){
  while(data_count !=0){
    Data[data_count--] = 0; 
  }
  return;
}

String getUID(){
  String uid = "";
  for(int i = 0; i < rfid.uid.size; i++){
    uid += rfid.uid.uidByte[i] < 0x10 ? "0" : "";
    uid += String(rfid.uid.uidByte[i], HEX);
  }
  rfid.PICC_HaltA();
  return uid;
}


bool checkUID(String uid){
  for(int i = 0; i < usersSize; i++){
    if(users[i] == uid){
      return true;
    }
  }
  return false;
}

void openDoor(){
  digitalWrite(ledPin, HIGH);
  tone(signalPin, 2000, 1000);
  lcd.clear();
  lcd.print("PORTA APERTA");
  lcd.setCursor(0,1);
  lcd.print("CHIUSURA: 'A'");
  myServo.write(PORTA_APERTA);
  clearData();  
  delay(1000);
  noTone(signalPin);
}

void checkClose(){
  int key;
  do{
      key = customKeypad.getKey();
  }
  while(key != 'A');
  tone(signalPin, 2500, 1000);
  delay(1000);
  noTone(signalPin);
}

void closeDoor(){
  myServo.write(PORTA_CHIUSA);
  lcd.clear();
  lcd.print("PORTA CHIUSA");
  digitalWrite(ledPin, LOW);
  rfidOK = 0;
  tastOK = 0;
  clearData();  
  delay(1000);
}
